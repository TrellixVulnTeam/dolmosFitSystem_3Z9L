import { __decorate } from "tslib";
import { HttpClient } from '@angular/common/http';
import { ChangeDetectorRef, Component, ElementRef, EventEmitter, HostListener, Input, OnDestroy, OnInit, Output, TemplateRef, ViewChild, ViewContainerRef, } from '@angular/core';
import { of, Subject } from 'rxjs';
import { concat, debounceTime, distinctUntilChanged, filter, map, switchMap, tap, } from 'rxjs/operators';
import { Key } from './models';
import { createParamsForQuery, hasCharacters, isEnterKey, isEscapeKey, isIndexActive, resolveApiMethod, resolveNextIndex, toFormControlValue, toJsonpFinalResults, toJsonpSingleResult, validateArrowKeys, validateNonCharKeyCode, resolveItemValue, NO_INDEX, } from './ngx-typeahead.utils';
/*
 using an external template:
 <input [taItemTpl]="itemTpl" >

  <ng-template #itemTpl let-result>
    <strong>MY {{ result.result }}</strong>
  </ng-template>
*/
var NgxTypeAheadComponent = /** @class */ (function () {
    function NgxTypeAheadComponent(element, viewContainer, http, cdr) {
        this.element = element;
        this.viewContainer = viewContainer;
        this.http = http;
        this.cdr = cdr;
        this.showSuggestions = false;
        this.results = [];
        this.taUrl = '';
        this.taParams = {};
        this.taQueryParam = 'q';
        this.taApi = 'jsonp';
        this.taApiMethod = 'get';
        this.taList = [];
        this.taListItemField = [];
        this.taListItemLabel = '';
        this.taDebounce = 300;
        this.taAllowEmpty = false;
        this.taCaseSensitive = false;
        this.taDisplayOnFocus = false;
        this.taSelected = new EventEmitter();
        this.suggestionIndex = 0;
        this.subscriptions = [];
        this.activeResult = '';
        this.searchQuery = '';
        this.selectedItem = {};
        this.resultsAsItems = [];
        this.keydown$ = new Subject();
        this.keyup$ = new Subject();
    }
    NgxTypeAheadComponent.prototype.handleEsc = function (event) {
        if (isEscapeKey(event)) {
            this.hideSuggestions();
            event.preventDefault();
        }
        this.keydown$.next(event);
    };
    NgxTypeAheadComponent.prototype.onkeyup = function (event) {
        event.preventDefault();
        event.stopPropagation();
        this.keyup$.next(event);
    };
    NgxTypeAheadComponent.prototype.onClick = function () {
        if (this.taDisplayOnFocus) {
            this.displaySuggestions();
        }
    };
    NgxTypeAheadComponent.prototype.ngOnInit = function () {
        this.filterEnterEvent(this.keydown$);
        this.listenAndSuggest(this.keyup$);
        this.navigateWithArrows(this.keydown$);
        this.renderTemplate();
    };
    NgxTypeAheadComponent.prototype.ngOnDestroy = function () {
        this.keydown$.complete();
        this.keyup$.complete();
    };
    NgxTypeAheadComponent.prototype.renderTemplate = function () {
        if (!this.suggestionsTplRef) {
            console.error('NO NGXTA Template Found. Requires NG9');
            return;
        }
        this.viewContainer.createEmbeddedView(this.suggestionsTplRef);
        this.cdr.markForCheck();
    };
    NgxTypeAheadComponent.prototype.listenAndSuggest = function (obs) {
        var _this = this;
        obs
            .pipe(
        // tslint:disable-next-line: deprecation
        filter(function (e) { return validateNonCharKeyCode(e.code); }), map(toFormControlValue), debounceTime(this.taDebounce), 
        // tslint:disable-next-line: deprecation
        concat(), distinctUntilChanged(), filter(function (query) { return _this.taAllowEmpty || hasCharacters(query); }), tap(function (query) { return (_this.searchQuery = query); }), switchMap(function (query) { return _this.suggest(query); }))
            .subscribe(function (results) {
            _this.assignResults(results);
            // this.updateIndex(Key.ArrowDown);
            _this.displaySuggestions();
        });
    };
    NgxTypeAheadComponent.prototype.assignResults = function (results) {
        var labelForDisplay = this.taListItemLabel;
        this.resultsAsItems = results;
        this.results = results.map(function (item) {
            return labelForDisplay ? item[labelForDisplay] : item;
        });
        this.suggestionIndex = NO_INDEX;
        if (!results || !results.length) {
            this.activeResult = this.searchQuery;
        }
    };
    NgxTypeAheadComponent.prototype.filterEnterEvent = function (elementObs) {
        var _this = this;
        elementObs.pipe(filter(isEnterKey)).subscribe(function (event) {
            _this.handleSelectSuggestion(_this.activeResult);
        });
    };
    NgxTypeAheadComponent.prototype.navigateWithArrows = function (elementObs) {
        var _this = this;
        elementObs
            .pipe(map(function (e) { return e.key; }), filter(function (key) { return validateArrowKeys(key); }))
            .subscribe(function (key) {
            _this.updateIndex(key);
            _this.displaySuggestions();
        });
    };
    NgxTypeAheadComponent.prototype.updateIndex = function (keyCode) {
        this.suggestionIndex = resolveNextIndex(this.suggestionIndex, keyCode === Key.ArrowDown, this.results.length);
    };
    NgxTypeAheadComponent.prototype.displaySuggestions = function () {
        this.showSuggestions = true;
        this.cdr.markForCheck();
    };
    NgxTypeAheadComponent.prototype.suggest = function (query) {
        return this.taList.length
            ? this.createListSource(this.taList, query)
            : this.request(query);
    };
    /**
     * peforms a jsonp/http request to search with query and params
     * @param query the query to search from the remote source
     */
    NgxTypeAheadComponent.prototype.request = function (query) {
        var url = this.taUrl;
        var searchConfig = createParamsForQuery(query, this.taQueryParam, this.taParams);
        var options = {
            params: searchConfig,
        };
        var isJsonpApi = this.taApi === 'jsonp';
        return isJsonpApi
            ? this.requestJsonp(url, options, this.taCallbackParamValue)
            : this.requestHttp(url, options);
    };
    NgxTypeAheadComponent.prototype.requestHttp = function (url, options) {
        var apiMethod = resolveApiMethod(this.taApiMethod);
        return this.http[apiMethod](url, options);
    };
    NgxTypeAheadComponent.prototype.requestJsonp = function (url, options, callback) {
        if (callback === void 0) { callback = 'callback'; }
        var params = options.params.toString();
        return this.http
            .jsonp(url + "?" + params, callback)
            .pipe(map(toJsonpSingleResult), map(toJsonpFinalResults));
    };
    NgxTypeAheadComponent.prototype.markIsActive = function (index, result) {
        var isActive = isIndexActive(index, this.suggestionIndex);
        if (isActive) {
            this.activeResult = result;
        }
        return isActive;
    };
    NgxTypeAheadComponent.prototype.handleSelectionClick = function (suggestion, index) {
        this.suggestionIndex = index;
        this.handleSelectSuggestion(suggestion);
    };
    NgxTypeAheadComponent.prototype.handleSelectSuggestion = function (suggestion) {
        var result = this.resultsAsItems.length
            ? this.resultsAsItems[this.suggestionIndex]
            : suggestion;
        this.hideSuggestions();
        var resolvedResult = this.suggestionIndex === NO_INDEX ? this.searchQuery : result;
        this.taSelected.emit(resolvedResult);
    };
    NgxTypeAheadComponent.prototype.hideSuggestions = function () {
        this.showSuggestions = false;
    };
    NgxTypeAheadComponent.prototype.hasItemTemplate = function () {
        return this.taItemTpl !== undefined;
    };
    NgxTypeAheadComponent.prototype.createListSource = function (list, query) {
        var _this = this;
        var sanitizedQuery = this.taCaseSensitive ? query : query.toLowerCase();
        var fieldsToExtract = this.taListItemField;
        return of(list.filter(function (item) {
            return resolveItemValue(item, fieldsToExtract, _this.taCaseSensitive).includes(sanitizedQuery);
        }));
    };
    NgxTypeAheadComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ViewContainerRef },
        { type: HttpClient },
        { type: ChangeDetectorRef }
    ]; };
    __decorate([
        Input()
    ], NgxTypeAheadComponent.prototype, "taItemTpl", void 0);
    __decorate([
        Input()
    ], NgxTypeAheadComponent.prototype, "taUrl", void 0);
    __decorate([
        Input()
    ], NgxTypeAheadComponent.prototype, "taParams", void 0);
    __decorate([
        Input()
    ], NgxTypeAheadComponent.prototype, "taQueryParam", void 0);
    __decorate([
        Input()
    ], NgxTypeAheadComponent.prototype, "taCallbackParamValue", void 0);
    __decorate([
        Input()
    ], NgxTypeAheadComponent.prototype, "taApi", void 0);
    __decorate([
        Input()
    ], NgxTypeAheadComponent.prototype, "taApiMethod", void 0);
    __decorate([
        Input()
    ], NgxTypeAheadComponent.prototype, "taList", void 0);
    __decorate([
        Input()
    ], NgxTypeAheadComponent.prototype, "taListItemField", void 0);
    __decorate([
        Input()
    ], NgxTypeAheadComponent.prototype, "taListItemLabel", void 0);
    __decorate([
        Input()
    ], NgxTypeAheadComponent.prototype, "taDebounce", void 0);
    __decorate([
        Input()
    ], NgxTypeAheadComponent.prototype, "taAllowEmpty", void 0);
    __decorate([
        Input()
    ], NgxTypeAheadComponent.prototype, "taCaseSensitive", void 0);
    __decorate([
        Input()
    ], NgxTypeAheadComponent.prototype, "taDisplayOnFocus", void 0);
    __decorate([
        Output()
    ], NgxTypeAheadComponent.prototype, "taSelected", void 0);
    __decorate([
        ViewChild(TemplateRef, { static: true })
    ], NgxTypeAheadComponent.prototype, "suggestionsTplRef", void 0);
    __decorate([
        HostListener('keydown', ['$event'])
    ], NgxTypeAheadComponent.prototype, "handleEsc", null);
    __decorate([
        HostListener('keyup', ['$event'])
    ], NgxTypeAheadComponent.prototype, "onkeyup", null);
    __decorate([
        HostListener('click')
    ], NgxTypeAheadComponent.prototype, "onClick", null);
    NgxTypeAheadComponent = __decorate([
        Component({
            // tslint:disable-next-line: component-selector
            selector: 'ngx-typeahead, [ngxTypeahead]',
            template: "\n    <ng-template #suggestionsTplRef>\n      <section class=\"ta-results list-group\" *ngIf=\"showSuggestions\">\n        <div class=\"ta-backdrop\" (click)=\"hideSuggestions()\"></div>\n        <button\n          type=\"button\"\n          class=\"ta-item list-group-item\"\n          *ngFor=\"let result of results; let i = index\"\n          [class.active]=\"markIsActive(i, result)\"\n          (click)=\"handleSelectionClick(result, i)\"\n        >\n          <span *ngIf=\"!taItemTpl\"\n            ><i class=\"fa fa-search\"></i> {{ result }}</span\n          >\n          <ng-template\n            [ngTemplateOutlet]=\"taItemTpl\"\n            [ngTemplateOutletContext]=\"{\n              $implicit: { result: result, index: i }\n            }\"\n          ></ng-template>\n        </button>\n      </section>\n    </ng-template>\n  ",
            styles: ["\n      .ta-results {\n        position: absolute;\n      }\n      .ta-backdrop {\n        bottom: 0;\n        left: 0;\n        position: fixed;\n        right: 0;\n        top: 0;\n        z-index: 1;\n      }\n      .ta-item {\n        position: relative;\n        z-index: 2;\n        display: block;\n      }\n    "]
        })
    ], NgxTypeAheadComponent);
    return NgxTypeAheadComponent;
}());
export { NgxTypeAheadComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXR5cGVhaGVhZC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtdHlwZWFoZWFkLyIsInNvdXJjZXMiOlsibGliL25neC10eXBlYWhlYWQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDbEQsT0FBTyxFQUNMLGlCQUFpQixFQUNqQixTQUFTLEVBQ1QsVUFBVSxFQUNWLFlBQVksRUFDWixZQUFZLEVBQ1osS0FBSyxFQUNMLFNBQVMsRUFDVCxNQUFNLEVBQ04sTUFBTSxFQUNOLFdBQVcsRUFDWCxTQUFTLEVBQ1QsZ0JBQWdCLEdBQ2pCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxFQUFFLEVBQWMsT0FBTyxFQUFnQixNQUFNLE1BQU0sQ0FBQztBQUM3RCxPQUFPLEVBQ0wsTUFBTSxFQUNOLFlBQVksRUFDWixvQkFBb0IsRUFDcEIsTUFBTSxFQUNOLEdBQUcsRUFDSCxTQUFTLEVBQ1QsR0FBRyxHQUNKLE1BQU0sZ0JBQWdCLENBQUM7QUFDeEIsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUMvQixPQUFPLEVBQ0wsb0JBQW9CLEVBQ3BCLGFBQWEsRUFDYixVQUFVLEVBQ1YsV0FBVyxFQUNYLGFBQWEsRUFDYixnQkFBZ0IsRUFDaEIsZ0JBQWdCLEVBQ2hCLGtCQUFrQixFQUNsQixtQkFBbUIsRUFDbkIsbUJBQW1CLEVBQ25CLGlCQUFpQixFQUNqQixzQkFBc0IsRUFDdEIsZ0JBQWdCLEVBQ2hCLFFBQVEsR0FDVCxNQUFNLHVCQUF1QixDQUFDO0FBRS9COzs7Ozs7O0VBT0U7QUFpREY7SUFnREUsK0JBQ1UsT0FBbUIsRUFDbkIsYUFBK0IsRUFDL0IsSUFBZ0IsRUFDaEIsR0FBc0I7UUFIdEIsWUFBTyxHQUFQLE9BQU8sQ0FBWTtRQUNuQixrQkFBYSxHQUFiLGFBQWEsQ0FBa0I7UUFDL0IsU0FBSSxHQUFKLElB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QztJQUc5QztRQURDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUM7b0VBQ0w7SUFtQnBDO1FBREMsWUFBWSxDQUFDLFNBQVMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDOzBEQU9uQztJQUdEO1FBREMsWUFBWSxDQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDO3dEQUtqQztJQUdEO1FBREMsWUFBWSxDQUFDLE9BQU8sQ0FBQzt3REFLckI7SUE1RVUscUJBQXFCO1FBaERqQyxTQUFTLENBQUM7WUFDVCwrQ0FBK0M7WUFDL0MsUUFBUSxFQUFFLCtCQUErQjtZQXFCekMsUUFBUSxFQUFFLDQwQkF1QlQ7cUJBMUNDLGlVQWlCQztTQTBCSixDQUFDO09BQ1cscUJBQXFCLENBcVBqQztJQUFELDRCQUFDO0NBQUEsQUFyUEQsSUFxUEM7U0FyUFkscUJBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7XG4gIENoYW5nZURldGVjdG9yUmVmLFxuICBDb21wb25lbnQsXG4gIEVsZW1lbnRSZWYsXG4gIEV2ZW50RW1pdHRlcixcbiAgSG9zdExpc3RlbmVyLFxuICBJbnB1dCxcbiAgT25EZXN0cm95LFxuICBPbkluaXQsXG4gIE91dHB1dCxcbiAgVGVtcGxhdGVSZWYsXG4gIFZpZXdDaGlsZCxcbiAgVmlld0NvbnRhaW5lclJlZixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBvZiwgT2JzZXJ2YWJsZSwgU3ViamVjdCwgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQge1xuICBjb25jYXQsXG4gIGRlYm91bmNlVGltZSxcbiAgZGlzdGluY3RVbnRpbENoYW5nZWQsXG4gIGZpbHRlcixcbiAgbWFwLFxuICBzd2l0Y2hNYXAsXG4gIHRhcCxcbn0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgS2V5IH0gZnJvbSAnLi9tb2RlbHMnO1xuaW1wb3J0IHtcbiAgY3JlYXRlUGFyYW1zRm9yUXVlcnksXG4gIGhhc0NoYXJhY3RlcnMsXG4gIGlzRW50ZXJLZXksXG4gIGlzRXNjYXBlS2V5LFxuICBpc0luZGV4QWN0aXZlLFxuICByZXNvbHZlQXBpTWV0aG9kLFxuICByZXNvbHZlTmV4dEluZGV4LFxuICB0b0Zvcm1Db250cm9sVmFsdWUsXG4gIHRvSnNvbnBGaW5hbFJlc3VsdHMsXG4gIHRvSnNvbnBTaW5nbGVSZXN1bHQsXG4gIHZhbGlkYXRlQXJyb3dLZXlzLFxuICB2YWxpZGF0ZU5vbkNoYXJLZXlDb2RlLFxuICByZXNvbHZlSXRlbVZhbHVlLFxuICBOT19JTkRFWCxcbn0gZnJvbSAnLi9uZ3gtdHlwZWFoZWFkLnV0aWxzJztcblxuLypcbiB1c2luZyBhbiBleHRlcm5hbCB0ZW1wbGF0ZTpcbiA8aW5wdXQgW3RhSXRlbVRwbF09XCJpdGVtVHBsXCIgPlxuXG4gIDxuZy10ZW1wbGF0ZSAjaXRlbVRwbCBsZXQtcmVzdWx0PlxuICAgIDxzdHJvbmc+TVkge3sgcmVzdWx0LnJlc3VsdCB9fTwvc3Ryb25nPlxuICA8L25nLXRlbXBsYXRlPlxuKi9cbkBDb21wb25lbnQoe1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IGNvbXBvbmVudC1zZWxlY3RvclxuICBzZWxlY3RvcjogJ25neC10eXBlYWhlYWQsIFtuZ3hUeXBlYWhlYWRdJyxcbiAgc3R5bGVzOiBbXG4gICAgYFxuICAgICAgLnRhLXJlc3VsdHMge1xuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICB9XG4gICAgICAudGEtYmFja2Ryb3Age1xuICAgICAgICBib3R0b206IDA7XG4gICAgICAgIGxlZnQ6IDA7XG4gICAgICAgIHBvc2l0aW9uOiBmaXhlZDtcbiAgICAgICAgcmlnaHQ6IDA7XG4gICAgICAgIHRvcDogMDtcbiAgICAgICAgei1pbmRleDogMTtcbiAgICAgIH1cbiAgICAgIC50YS1pdGVtIHtcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICB6LWluZGV4OiAyO1xuICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgIH1cbiAgICBgLFxuICBdLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxuZy10ZW1wbGF0ZSAjc3VnZ2VzdGlvbnNUcGxSZWY+XG4gICAgICA8c2VjdGlvbiBjbGFzcz1cInRhLXJlc3VsdHMgbGlzdC1ncm91cFwiICpuZ0lmPVwic2hvd1N1Z2dlc3Rpb25zXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJ0YS1iYWNrZHJvcFwiIChjbGljayk9XCJoaWRlU3VnZ2VzdGlvbnMoKVwiPjwvZGl2PlxuICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgICAgY2xhc3M9XCJ0YS1pdGVtIGxpc3QtZ3JvdXAtaXRlbVwiXG4gICAgICAgICAgKm5nRm9yPVwibGV0IHJlc3VsdCBvZiByZXN1bHRzOyBsZXQgaSA9IGluZGV4XCJcbiAgICAgICAgICBbY2xhc3MuYWN0aXZlXT1cIm1hcmtJc0FjdGl2ZShpLCByZXN1bHQpXCJcbiAgICAgICAgICAoY2xpY2spPVwiaGFuZGxlU2VsZWN0aW9uQ2xpY2socmVzdWx0LCBpKVwiXG4gICAgICAgID5cbiAgICAgICAgICA8c3BhbiAqbmdJZj1cIiF0YUl0ZW1UcGxcIlxuICAgICAgICAgICAgPjxpIGNsYXNzPVwiZmEgZmEtc2VhcmNoXCI+PC9pPiB7eyByZXN1bHQgfX08L3NwYW5cbiAgICAgICAgICA+XG4gICAgICAgICAgPG5nLXRlbXBsYXRlXG4gICAgICAgICAgICBbbmdUZW1wbGF0ZU91dGxldF09XCJ0YUl0ZW1UcGxcIlxuICAgICAgICAgICAgW25nVGVtcGxhdGVPdXRsZXRDb250ZXh0XT1cIntcbiAgICAgICAgICAgICAgJGltcGxpY2l0OiB7IHJlc3VsdDogcmVzdWx0LCBpbmRleDogaSB9XG4gICAgICAgICAgICB9XCJcbiAgICAgICAgICA+PC9uZy10ZW1wbGF0ZT5cbiAgICAgICAgPC9idXR0b24+XG4gICAgICA8L3NlY3Rpb24+XG4gICAgPC9uZy10ZW1wbGF0ZT5cbiAgYCxcbn0pXG5leHBvcnQgY2xhc3MgTmd4VHlwZUFoZWFkQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICBzaG93U3VnZ2VzdGlvbnMgPSBmYWxzZTtcbiAgcmVzdWx0czogc3RyaW5nW10gPSBbXTtcblxuICBASW5wdXQoKVxuICB0YUl0ZW1UcGwhOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICBASW5wdXQoKVxuICB0YVVybCA9ICcnO1xuICBASW5wdXQoKVxuICB0YVBhcmFtcyA9IHt9O1xuICBASW5wdXQoKVxuICB0YVF1ZXJ5UGFyYW0gPSAncSc7XG4gIEBJbnB1dCgpXG4gIHRhQ2FsbGJhY2tQYXJhbVZhbHVlO1xuICBASW5wdXQoKVxuICB0YUFwaSA9ICdqc29ucCc7XG4gIEBJbnB1dCgpXG4gIHRhQXBpTWV0aG9kID0gJ2dldCc7XG4gIEBJbnB1dCgpXG4gIHRhTGlzdCA9IFtdO1xuICBASW5wdXQoKVxuICB0YUxpc3RJdGVtRmllbGQgPSBbXTtcbiAgQElucHV0KClcbiAgdGFMaXN0SXRlbUxhYmVsID0gJyc7XG4gIEBJbnB1dCgpXG4gIHRhRGVib3VuY2UgPSAzMDA7XG4gIEBJbnB1dCgpXG4gIHRhQWxsb3dFbXB0eSA9IGZhbHNlO1xuICBASW5wdXQoKVxuICB0YUNhc2VTZW5zaXRpdmUgPSBmYWxzZTtcbiAgQElucHV0KClcbiAgdGFEaXNwbGF5T25Gb2N1cyA9IGZhbHNlO1xuXG4gIEBPdXRwdXQoKVxuICB0YVNlbGVjdGVkID0gbmV3IEV2ZW50RW1pdHRlcjxzdHJpbmcgfCBhbnk+KCk7XG5cbiAgQFZpZXdDaGlsZChUZW1wbGF0ZVJlZiwgeyBzdGF0aWM6IHRydWUgfSlcbiAgc3VnZ2VzdGlvbnNUcGxSZWY6IFRlbXBsYXRlUmVmPGFueT47XG5cbiAgcHJpdmF0ZSBzdWdnZXN0aW9uSW5kZXggPSAwO1xuICBwcml2YXRlIHN1YnNjcmlwdGlvbnM6IFN1YnNjcmlwdGlvbltdID0gW107XG4gIHByaXZhdGUgYWN0aXZlUmVzdWx0ID0gJyc7XG4gIHByaXZhdGUgc2VhcmNoUXVlcnkgPSAnJztcbiAgcHJpdmF0ZSBzZWxlY3RlZEl0ZW06IGFueSA9IHt9O1xuICBwcml2YXRlIHJlc3VsdHNBc0l0ZW1zOiBhbnlbXSA9IFtdO1xuICBwcml2YXRlIGtleWRvd24kID0gbmV3IFN1YmplY3Q8S2V5Ym9hcmRFdmVudD4oKTtcbiAgcHJpdmF0ZSBrZXl1cCQgPSBuZXcgU3ViamVjdDxLZXlib2FyZEV2ZW50PigpO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgZWxlbWVudDogRWxlbWVudFJlZixcbiAgICBwcml2YXRlIHZpZXdDb250YWluZXI6IFZpZXdDb250YWluZXJSZWYsXG4gICAgcHJpdmF0ZSBodHRwOiBIdHRwQ2xpZW50LFxuICAgIHByaXZhdGUgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZlxuICApIHt9XG5cbiAgQEhvc3RMaXN0ZW5lcigna2V5ZG93bicsIFsnJGV2ZW50J10pXG4gIGhhbmRsZUVzYyhldmVudDogS2V5Ym9hcmRFdmVudCkge1xuICAgIGlmIChpc0VzY2FwZUtleShldmVudCkpIHtcbiAgICAgIHRoaXMuaGlkZVN1Z2dlc3Rpb25zKCk7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgICB0aGlzLmtleWRvd24kLm5leHQoZXZlbnQpO1xuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcigna2V5dXAnLCBbJyRldmVudCddKVxuICBvbmtleXVwKGV2ZW50OiBLZXlib2FyZEV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB0aGlzLmtleXVwJC5uZXh0KGV2ZW50KTtcbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJylcbiAgb25DbGljaygpIHtcbiAgICBpZiAodGhpcy50YURpc3BsYXlPbkZvY3VzKSB7XG4gICAgICB0aGlzLmRpc3BsYXlTdWdnZXN0aW9ucygpO1xuICAgIH1cbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuZmlsdGVyRW50ZXJFdmVudCh0aGlzLmtleWRvd24kKTtcbiAgICB0aGlzLmxpc3RlbkFuZFN1Z2dlc3QodGhpcy5rZXl1cCQpO1xuICAgIHRoaXMubmF2aWdhdGVXaXRoQXJyb3dzKHRoaXMua2V5ZG93biQpO1xuICAgIHRoaXMucmVuZGVyVGVtcGxhdGUoKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMua2V5ZG93biQuY29tcGxldGUoKTtcbiAgICB0aGlzLmtleXVwJC5jb21wbGV0ZSgpO1xuICB9XG5cbiAgcmVuZGVyVGVtcGxhdGUoKSB7XG4gICAgaWYgKCF0aGlzLnN1Z2dlc3Rpb25zVHBsUmVmKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdOTyBOR1hUQSBUZW1wbGF0ZSBGb3VuZC4gUmVxdWlyZXMgTkc5Jyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMudmlld0NvbnRhaW5lci5jcmVhdGVFbWJlZGRlZFZpZXcodGhpcy5zdWdnZXN0aW9uc1RwbFJlZik7XG4gICAgdGhpcy5jZHIubWFya0ZvckNoZWNrKCk7XG4gIH1cblxuICBsaXN0ZW5BbmRTdWdnZXN0KG9iczogU3ViamVjdDxLZXlib2FyZEV2ZW50Pikge1xuICAgIG9ic1xuICAgICAgLnBpcGUoXG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogZGVwcmVjYXRpb25cbiAgICAgICAgZmlsdGVyKChlOiBLZXlib2FyZEV2ZW50KSA9PiB2YWxpZGF0ZU5vbkNoYXJLZXlDb2RlKGUuY29kZSkpLFxuICAgICAgICBtYXAodG9Gb3JtQ29udHJvbFZhbHVlKSxcbiAgICAgICAgZGVib3VuY2VUaW1lKHRoaXMudGFEZWJvdW5jZSksXG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogZGVwcmVjYXRpb25cbiAgICAgICAgY29uY2F0KCksXG4gICAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKCksXG4gICAgICAgIGZpbHRlcigocXVlcnk6IHN0cmluZykgPT4gdGhpcy50YUFsbG93RW1wdHkgfHwgaGFzQ2hhcmFjdGVycyhxdWVyeSkpLFxuICAgICAgICB0YXAoKHF1ZXJ5OiBzdHJpbmcpID0+ICh0aGlzLnNlYXJjaFF1ZXJ5ID0gcXVlcnkpKSxcbiAgICAgICAgc3dpdGNoTWFwKChxdWVyeTogc3RyaW5nKSA9PiB0aGlzLnN1Z2dlc3QocXVlcnkpKVxuICAgICAgKVxuICAgICAgLnN1YnNjcmliZSgocmVzdWx0czogc3RyaW5nW10gfCBhbnkpID0+IHtcbiAgICAgICAgdGhpcy5hc3NpZ25SZXN1bHRzKHJlc3VsdHMpO1xuICAgICAgICAvLyB0aGlzLnVwZGF0ZUluZGV4KEtleS5BcnJvd0Rvd24pO1xuICAgICAgICB0aGlzLmRpc3BsYXlTdWdnZXN0aW9ucygpO1xuICAgICAgfSk7XG4gIH1cblxuICBhc3NpZ25SZXN1bHRzKHJlc3VsdHM6IGFueVtdKSB7XG4gICAgY29uc3QgbGFiZWxGb3JEaXNwbGF5ID0gdGhpcy50YUxpc3RJdGVtTGFiZWw7XG4gICAgdGhpcy5yZXN1bHRzQXNJdGVtcyA9IHJlc3VsdHM7XG4gICAgdGhpcy5yZXN1bHRzID0gcmVzdWx0cy5tYXAoKGl0ZW06IHN0cmluZyB8IGFueSkgPT5cbiAgICAgIGxhYmVsRm9yRGlzcGxheSA/IGl0ZW1bbGFiZWxGb3JEaXNwbGF5XSA6IGl0ZW1cbiAgICApO1xuICAgIHRoaXMuc3VnZ2VzdGlvbkluZGV4ID0gTk9fSU5ERVg7XG4gICAgaWYgKCFyZXN1bHRzIHx8ICFyZXN1bHRzLmxlbmd0aCkge1xuICAgICAgdGhpcy5hY3RpdmVSZXN1bHQgPSB0aGlzLnNlYXJjaFF1ZXJ5O1xuICAgIH1cbiAgfVxuXG4gIGZpbHRlckVudGVyRXZlbnQoZWxlbWVudE9iczogU3ViamVjdDxLZXlib2FyZEV2ZW50Pikge1xuICAgIGVsZW1lbnRPYnMucGlwZShmaWx0ZXIoaXNFbnRlcktleSkpLnN1YnNjcmliZSgoZXZlbnQ6IEtleWJvYXJkRXZlbnQpID0+IHtcbiAgICAgIHRoaXMuaGFuZGxlU2VsZWN0U3VnZ2VzdGlvbih0aGlzLmFjdGl2ZVJlc3VsdCk7XG4gICAgfSk7XG4gIH1cblxuICBuYXZpZ2F0ZVdpdGhBcnJvd3MoZWxlbWVudE9iczogU3ViamVjdDxLZXlib2FyZEV2ZW50Pikge1xuICAgIGVsZW1lbnRPYnNcbiAgICAgIC5waXBlKFxuICAgICAgICBtYXAoKGU6IGFueSkgPT4gZS5rZXkpLFxuICAgICAgICBmaWx0ZXIoKGtleTogS2V5KSA9PiB2YWxpZGF0ZUFycm93S2V5cyhrZXkpKVxuICAgICAgKVxuICAgICAgLnN1YnNjcmliZSgoa2V5OiBLZXkpID0+IHtcbiAgICAgICAgdGhpcy51cGRhdGVJbmRleChrZXkpO1xuICAgICAgICB0aGlzLmRpc3BsYXlTdWdnZXN0aW9ucygpO1xuICAgICAgfSk7XG4gIH1cblxuICB1cGRhdGVJbmRleChrZXlDb2RlOiBzdHJpbmcpIHtcbiAgICB0aGlzLnN1Z2dlc3Rpb25JbmRleCA9IHJlc29sdmVOZXh0SW5kZXgoXG4gICAgICB0aGlzLnN1Z2dlc3Rpb25JbmRleCxcbiAgICAgIGtleUNvZGUgPT09IEtleS5BcnJvd0Rvd24sXG4gICAgICB0aGlzLnJlc3VsdHMubGVuZ3RoXG4gICAgKTtcbiAgfVxuXG4gIGRpc3BsYXlTdWdnZXN0aW9ucygpIHtcbiAgICB0aGlzLnNob3dTdWdnZXN0aW9ucyA9IHRydWU7XG4gICAgdGhpcy5jZHIubWFya0ZvckNoZWNrKCk7XG4gIH1cblxuICBzdWdnZXN0KHF1ZXJ5OiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy50YUxpc3QubGVuZ3RoXG4gICAgICA/IHRoaXMuY3JlYXRlTGlzdFNvdXJjZSh0aGlzLnRhTGlzdCwgcXVlcnkpXG4gICAgICA6IHRoaXMucmVxdWVzdChxdWVyeSk7XG4gIH1cblxuICAvKipcbiAgICogcGVmb3JtcyBhIGpzb25wL2h0dHAgcmVxdWVzdCB0byBzZWFyY2ggd2l0aCBxdWVyeSBhbmQgcGFyYW1zXG4gICAqIEBwYXJhbSBxdWVyeSB0aGUgcXVlcnkgdG8gc2VhcmNoIGZyb20gdGhlIHJlbW90ZSBzb3VyY2VcbiAgICovXG4gIHJlcXVlc3QocXVlcnk6IHN0cmluZykge1xuICAgIGNvbnN0IHVybCA9IHRoaXMudGFVcmw7XG4gICAgY29uc3Qgc2VhcmNoQ29uZmlnID0gY3JlYXRlUGFyYW1zRm9yUXVlcnkoXG4gICAgICBxdWVyeSxcbiAgICAgIHRoaXMudGFRdWVyeVBhcmFtLFxuICAgICAgdGhpcy50YVBhcmFtc1xuICAgICk7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgIHBhcmFtczogc2VhcmNoQ29uZmlnLFxuICAgIH07XG4gICAgY29uc3QgaXNKc29ucEFwaSA9IHRoaXMudGFBcGkgPT09ICdqc29ucCc7XG4gICAgcmV0dXJuIGlzSnNvbnBBcGlcbiAgICAgID8gdGhpcy5yZXF1ZXN0SnNvbnAodXJsLCBvcHRpb25zLCB0aGlzLnRhQ2FsbGJhY2tQYXJhbVZhbHVlKVxuICAgICAgOiB0aGlzLnJlcXVlc3RIdHRwKHVybCwgb3B0aW9ucyk7XG4gIH1cblxuICByZXF1ZXN0SHR0cCh1cmw6IHN0cmluZywgb3B0aW9ucykge1xuICAgIGNvbnN0IGFwaU1ldGhvZCA9IHJlc29sdmVBcGlNZXRob2QodGhpcy50YUFwaU1ldGhvZCk7XG4gICAgcmV0dXJuIHRoaXMuaHR0cFthcGlNZXRob2RdKHVybCwgb3B0aW9ucyk7XG4gIH1cblxuICByZXF1ZXN0SnNvbnAodXJsLCBvcHRpb25zLCBjYWxsYmFjayA9ICdjYWxsYmFjaycpIHtcbiAgICBjb25zdCBwYXJhbXMgPSBvcHRpb25zLnBhcmFtcy50b1N0cmluZygpO1xuICAgIHJldHVybiB0aGlzLmh0dHBcbiAgICAgIC5qc29ucChgJHt1cmx9PyR7cGFyYW1zfWAsIGNhbGxiYWNrKVxuICAgICAgLnBpcGUobWFwKHRvSnNvbnBTaW5nbGVSZXN1bHQpLCBtYXAodG9Kc29ucEZpbmFsUmVzdWx0cykpO1xuICB9XG5cbiAgbWFya0lzQWN0aXZlKGluZGV4OiBudW1iZXIsIHJlc3VsdDogc3RyaW5nKSB7XG4gICAgY29uc3QgaXNBY3RpdmUgPSBpc0luZGV4QWN0aXZlKGluZGV4LCB0aGlzLnN1Z2dlc3Rpb25JbmRleCk7XG4gICAgaWYgKGlzQWN0aXZlKSB7XG4gICAgICB0aGlzLmFjdGl2ZVJlc3VsdCA9IHJlc3VsdDtcbiAgICB9XG4gICAgcmV0dXJuIGlzQWN0aXZlO1xuICB9XG5cbiAgaGFuZGxlU2VsZWN0aW9uQ2xpY2soc3VnZ2VzdGlvbjogc3RyaW5nLCBpbmRleDogbnVtYmVyKSB7XG4gICAgdGhpcy5zdWdnZXN0aW9uSW5kZXggPSBpbmRleDtcbiAgICB0aGlzLmhhbmRsZVNlbGVjdFN1Z2dlc3Rpb24oc3VnZ2VzdGlvbik7XG4gIH1cblxuICBoYW5kbGVTZWxlY3RTdWdnZXN0aW9uKHN1Z2dlc3Rpb246IHN0cmluZykge1xuICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMucmVzdWx0c0FzSXRlbXMubGVuZ3RoXG4gICAgICA/IHRoaXMucmVzdWx0c0FzSXRlbXNbdGhpcy5zdWdnZXN0aW9uSW5kZXhdXG4gICAgICA6IHN1Z2dlc3Rpb247XG4gICAgdGhpcy5oaWRlU3VnZ2VzdGlvbnMoKTtcbiAgICBjb25zdCByZXNvbHZlZFJlc3VsdCA9XG4gICAgICB0aGlzLnN1Z2dlc3Rpb25JbmRleCA9PT0gTk9fSU5ERVggPyB0aGlzLnNlYXJjaFF1ZXJ5IDogcmVzdWx0O1xuICAgIHRoaXMudGFTZWxlY3RlZC5lbWl0KHJlc29sdmVkUmVzdWx0KTtcbiAgfVxuXG4gIGhpZGVTdWdnZXN0aW9ucygpIHtcbiAgICB0aGlzLnNob3dTdWdnZXN0aW9ucyA9IGZhbHNlO1xuICB9XG5cbiAgaGFzSXRlbVRlbXBsYXRlKCkge1xuICAgIHJldHVybiB0aGlzLnRhSXRlbVRwbCAhPT0gdW5kZWZpbmVkO1xuICB9XG5cbiAgY3JlYXRlTGlzdFNvdXJjZShsaXN0OiBhbnlbXSwgcXVlcnk6IHN0cmluZyk6IE9ic2VydmFibGU8c3RyaW5nW10+IHtcbiAgICBjb25zdCBzYW5pdGl6ZWRRdWVyeSA9IHRoaXMudGFDYXNlU2Vuc2l0aXZlID8gcXVlcnkgOiBxdWVyeS50b0xvd2VyQ2FzZSgpO1xuICAgIGNvbnN0IGZpZWxkc1RvRXh0cmFjdCA9IHRoaXMudGFMaXN0SXRlbUZpZWxkO1xuICAgIHJldHVybiBvZihcbiAgICAgIGxpc3QuZmlsdGVyKChpdGVtOiBzdHJpbmcgfCBhbnkpID0+IHtcbiAgICAgICAgcmV0dXJuIHJlc29sdmVJdGVtVmFsdWUoXG4gICAgICAgICAgaXRlbSxcbiAgICAgICAgICBmaWVsZHNUb0V4dHJhY3QsXG4gICAgICAgICAgdGhpcy50YUNhc2VTZW5zaXRpdmVcbiAgICAgICAgKS5pbmNsdWRlcyhzYW5pdGl6ZWRRdWVyeSk7XG4gICAgICB9KVxuICAgICk7XG4gIH1cbn1cbiJdfQ==