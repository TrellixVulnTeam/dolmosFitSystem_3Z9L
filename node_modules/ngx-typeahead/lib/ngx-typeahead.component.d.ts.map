{"version":3,"file":"ngx-typeahead.component.d.ts","sources":["ngx-typeahead.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, OnInit, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nexport declare class NgxTypeAheadComponent implements OnInit, OnDestroy {\n    private element;\n    private viewContainer;\n    private http;\n    private cdr;\n    showSuggestions: boolean;\n    results: string[];\n    taItemTpl: TemplateRef<any>;\n    taUrl: string;\n    taParams: {};\n    taQueryParam: string;\n    taCallbackParamValue: any;\n    taApi: string;\n    taApiMethod: string;\n    taList: any[];\n    taListItemField: any[];\n    taListItemLabel: string;\n    taDebounce: number;\n    taAllowEmpty: boolean;\n    taCaseSensitive: boolean;\n    taDisplayOnFocus: boolean;\n    taSelected: EventEmitter<any>;\n    suggestionsTplRef: TemplateRef<any>;\n    private suggestionIndex;\n    private subscriptions;\n    private activeResult;\n    private searchQuery;\n    private selectedItem;\n    private resultsAsItems;\n    private keydown$;\n    private keyup$;\n    constructor(element: ElementRef, viewContainer: ViewContainerRef, http: HttpClient, cdr: ChangeDetectorRef);\n    handleEsc(event: KeyboardEvent): void;\n    onkeyup(event: KeyboardEvent): void;\n    onClick(): void;\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    renderTemplate(): void;\n    listenAndSuggest(obs: Subject<KeyboardEvent>): void;\n    assignResults(results: any[]): void;\n    filterEnterEvent(elementObs: Subject<KeyboardEvent>): void;\n    navigateWithArrows(elementObs: Subject<KeyboardEvent>): void;\n    updateIndex(keyCode: string): void;\n    displaySuggestions(): void;\n    suggest(query: string): any;\n    /**\n     * peforms a jsonp/http request to search with query and params\n     * @param query the query to search from the remote source\n     */\n    request(query: string): any;\n    requestHttp(url: string, options: any): any;\n    requestJsonp(url: any, options: any, callback?: string): Observable<any[]>;\n    markIsActive(index: number, result: string): boolean;\n    handleSelectionClick(suggestion: string, index: number): void;\n    handleSelectSuggestion(suggestion: string): void;\n    hideSuggestions(): void;\n    hasItemTemplate(): boolean;\n    createListSource(list: any[], query: string): Observable<string[]>;\n}\n"]}